def gv

pipeline {
    agent any

    tools {
        maven 'Maven' //the value must be the same as in the Web UI
    }

    stages {
        stage("init") {
            steps {
                script {
                    gv = load "./Module_8-CICD_with_Jenkins/java-maven-app-master/script.groovy"
                }
            }
        }
        stage("increment version") {
            steps {
                script {
                dir("./Module_8-CICD_with_Jenkins/java-maven-app-master/") { 
                sh 'mvn build-helper:parse-version versions:set \
                        -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                        versions:commit'
                def matcher = readFile('pom.xml') =~ '<version>(.+)</version>' //regex to match every line containing every version
                def version = matcher[0][1] //first line containing version > child (actual string with the version number)
                env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                    }
                }  
            }
        }
        stage("build java jar") {
            steps {
                script {
                    echo "building jar"
                    gv.buildJar()
                }
            }
        }
        stage("build docker image") {
            steps {
                script {
                    echo "building image"
                    gv.buildImage env.IMAGE_NAME
                }
            }
        }
        stage("deploy the image") {
            environment {
                AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
                APP_NAME = 'java-maven-app'
            }
            steps {
                script {
                    echo "deploying"
                    sh "envsubst < kubernetes/deployment.yaml | kubectl apply -f -"
                    sh "envsubst < kubernetes/service.yaml | kubectl apply -f -"
                }
            }
        }

        stage("commit version bump") {
            steps {
                    script {
                        withCredentials([string(credentialsId: 'github-access-token', variable: 'TOKEN')]) {
                        sh 'git config user.email "jenkins@example.com"'
                        sh 'git config user.name "jenkins"'
                        sh 'git remote set-url origin https://$TOKEN@github.com/ngrandrei/devops-bootcamp.git'
                        sh "git add ."
                        sh 'git commit -m "version bump to \\\${env.IMAGE_NAME}"'
                        
                        sh "git push origin HEAD:main"
                        }
                    }
            }
        }
    }   
}